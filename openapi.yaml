openapi: 3.0.3
info:
  title: Book Store Api
  description: Book Store Api
  version: 1.0.0
servers:
  - url: 'http://localhost:8081/'
security:
  - BearerAuth: []

tags:
  - name: auth
    description: |
      Auth resources
  - name: store
    description: |
      Store resources
paths:
  /api/register:
    post:
      tags:
        - auth
      summary: Register new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/login:
    post:
      tags:
        - auth
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Credentials does not match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /api/logout:
    delete:
      tags:
        - auth
      summary: Logout
      responses:
        204:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
  /api/stores:
    post:
      tags:
        - store
      summary: Create store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStoreRequest'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
    get:
      tags:
        - store
      summary: List stores
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStoreResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /api/stores/{storeId}:
    get:
      tags:
        - store
      summary: Create store
      parameters:
        - name: storeId
          schema:
            type: integer
          in: path
          required: true
          description: Numeric id of the store
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreResponse'
    put:
      tags:
        - store
      summary: Update store
      parameters:
        - name: storeId
          schema:
            type: integer
          in: path
          required: true
          description: Numeric id of the store
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreResponse'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - store
      summary: Delete store
      parameters:
        - name: storeId
          schema:
            type: integer
          in: path
          required: true
          description: Numeric id of the store
      responses:
        204:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    UserRequest:
      type: object
      properties:
        email:
          type: string
          example: johndoe@mail.com
        name:
          type: string
          example: John Doe
        password:
          type: string
          example: 123ASd34
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: johndoe@mail.com
        name:
          type: string
          example: John Doe
        created_at:
          type: string
          format: date-time
          example: '2024-05-18T15:16:26.000000Z'
        updated:
          type: string
          format: date-time
          example: '2024-05-18T15:16:26.000000Z'
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: johndoe@mail.com
        password:
          type: string
          example: 123445321
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: tp30A8gRg0P7tKDvmLHqJmW6F44oOtaqTrAyAdJ5ab47f101
        expires_at:
          type: string
          format: date-time
          example: '2024-05-18T15:16:26.000000Z'
    CreateStoreRequest:
      type: object
      properties:
        name:
          type: string
          example: Company name
        address:
          type: string
          example: 32, My Street, Kingston, New York 12401
        is_active:
          type: boolean
          example: true
    ListStoreResponse:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        data:
          type: array
          items:
            $ref: '#/components/schemas/StoreResponse'
        first_page_url:
          type: string
          format: uri
          example: "localhost:8081/api/stores?page=1"
        from:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 1
        last_page_url:
          type: string
          format: uri
          example: "localhost:8081/api/stores?page=1"
        links:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
                nullable: true
                example: null
              label:
                type: string
                example: "Previous"
              active:
                type: boolean
                example: false
        next_page_url:
          type: string
          format: uri
          nullable: true
          example: null
        path:
          type: string
          format: uri
          example: "localhost:8081/api/stores"
        per_page:
          type: integer
          example: 10
        prev_page_url:
          type: string
          format: uri
          nullable: true
          example: null
        to:
          type: integer
          example: 1
        total:
           type: integer
           example: 1
    StoreResponse:
      type: object
      properties:
        name:
          type: string
          example: Company name
        address:
          type: string
          example: 32, My Street, Kingston, New York 12401
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: '2024-05-18T15:16:26.000000Z'
        updated:
          type: string
          format: date-time
          example: '2024-05-18T15:16:26.000000Z'
    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: The email has already been taken.
        errors:
          type: object
          properties:
            email:
              type: array
              items:
                type: string
                example: The email has already been taken.
    BasicError:
      type: object
      properties:
        message:
          type: string
          example: Error message.





